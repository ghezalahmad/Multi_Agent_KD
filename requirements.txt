aiohappyeyeballs==2.6.1
aiohttp==3.12.13
aiosignal==1.3.2
altair==5.5.0
annotated-types==0.7.0
anyio==4.9.0
asttokens==3.0.0
attrs==25.3.0
blinker==1.9.0
cachetools==6.1.0
certifi==2025.6.15
charset-normalizer==3.4.2
click==8.2.1
dataclasses-json==0.6.7
decorator==5.2.1
executing==2.2.0
frozenlist==1.7.0
gitdb==4.0.12
GitPython==3.1.44
h11==0.16.0
httpcore==1.0.9
httpx==0.28.1
httpx-sse==0.4.1
idna==3.10
ipython==9.4.0
ipython_pygments_lexers==1.1.1
jedi==0.19.2
Jinja2==3.1.6
jsonpatch==1.33
jsonpickle==4.1.1
jsonpointer==3.0.0
jsonschema==4.24.0
jsonschema-specifications==2025.4.1
langchain==0.3.26
langchain-community==0.3.26
langchain-core==0.3.67
langchain-text-splitters==0.3.8
langsmith==0.4.4
MarkupSafe==3.0.2
marshmallow==3.26.1
matplotlib-inline==0.1.7
multidict==6.6.3
mypy_extensions==1.1.0
narwhals==1.45.0
neo4j==5.28.1
networkx==3.5
numpy==2.3.1
orjson==3.10.18
packaging==24.2
pandas==2.3.0
parso==0.8.4
pexpect==4.9.0
pillow==11.3.0
plotly==6.2.0
prompt_toolkit==3.0.51
propcache==0.3.2
protobuf==6.31.1
ptyprocess==0.7.0
pure_eval==0.2.3
pyarrow==20.0.0
pydantic==2.11.7
pydantic-settings==2.10.1
pydantic_core==2.33.2
pydeck==0.9.1
Pygments==2.19.2
python-dateutil==2.9.0.post0
python-dotenv==1.1.1
pytz==2025.2
pyvis==0.3.2
PyYAML==6.0.2
referencing==0.36.2
requests==2.32.4
requests-toolbelt==1.0.0
rpds-py==0.26.0
six==1.17.0
smmap==5.0.2
sniffio==1.3.1
SQLAlchemy==2.0.41
stack-data==0.6.3
streamlit==1.46.1
tenacity==9.1.2
toml==0.10.2
tornado==6.5.1
traitlets==5.14.3
typing-inspect==0.9.0
typing-inspection==0.4.1
typing_extensions==4.14.0
tzdata==2025.2
urllib3==2.5.0
wcwidth==0.2.13
yarl==1.20.1
zstandard==0.23.0



# agents/planner_agent.py

from .base_agent import BaseAgent
from agents.critique_agent import CritiqueAgent
from agents.forecaster_agent import ForecasterAgent
from agents.risk_assessment_agent import RiskAssessmentAgent
from agents.tool_agent import ToolSelectorAgent
from utils.session_utils import log_agent_response  # ‚úÖ Import the logger
from pathlib import Path
from datetime import date
import asyncio

# Optional: cache tool selector results (in-memory)
tool_selector_cache = {}

class PlannerAgent(BaseAgent):
    def __init__(self):
        prompt = Path("prompts/planner.txt").read_text()
        super().__init__(prompt, temperature=0.0)

    async def __call__(self, user_msg: str, plan_id: str) -> str:
        # Step 1: Run planner
        plan_text = await super().__call__(user_msg)
        log_agent_response(plan_id, "PlannerAgent", plan_text, user_input=user_msg)

        # Step 2: ToolSelectorAgent
        tool_agent = ToolSelectorAgent()

        async def get_tool_result(plan_preview):
            cache_key = "::".join(plan_preview.split()[:20])
            if cache_key in tool_selector_cache:
                return tool_selector_cache[cache_key]
            result = await tool_agent.run(plan_preview)
            tool_selector_cache[cache_key] = result
            return result

        tool_task = asyncio.create_task(get_tool_result(plan_text))

        # Step 3: CritiqueAgent
        critique_agent = CritiqueAgent()
        critique_input = f"""**Scenario Context (from user input & planner):**
User Input: {user_msg}
Planner Output: {plan_text}

**Proposed NDT Approach by ToolSelectorAgent:**
Waiting for ToolSelector output...
"""
        critique_response = await critique_agent(critique_input)
        log_agent_response(plan_id, "CritiqueAgent", critique_response)

        # Step 4: Wait for tool_result
        tool_result = await tool_task
        log_agent_response(plan_id, "ToolSelectorAgent", tool_result.get("summary_text", ""))

        # Step 5: ForecasterAgent
        forecaster_agent = ForecasterAgent()
        today = date.today().isoformat()
        forecast_input = f"""{critique_response}

Today is {today}. Predict degradation trajectory."""
        forecast_response = await forecaster_agent(forecast_input)
        log_agent_response(plan_id, "ForecasterAgent", forecast_response)

        # Step 6: RiskAssessmentAgent
        risk_agent = RiskAssessmentAgent()
        risk_input = f"""User Input: {user_msg}
Planner Output: {plan_text}
Forecast Summary: {forecast_response}

Evaluate potential safety, access, and equipment-related risks for the proposed NDT scenario."""
        risk_response = await risk_agent(risk_input)
        log_agent_response(plan_id, "RiskAssessmentAgent", risk_response)

        # Step 7: Final return
        final_response = f"""üß≠ **Planner's Proposed Plan:**
{plan_text}

üß∞ **ToolSelectorAgent Recommendation:**
{tool_result.get('summary_text', '')}

üßê **Critique Agent's Feedback:**
{critique_response}

üîÆ **Forecaster Agent's Prediction:**
{forecast_response}

‚ö†Ô∏è **Risk Assessment Agent's Analysis:**
{risk_response}"""

        return final_response
